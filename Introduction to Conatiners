Containers vs. Hypervisors
Hypervisor-Based Virtualization:
Physical Server: A hardware machine with allocated resources (e.g., 100GB storage, 100 CPUs).
Hypervisor:
Software layer that enables virtualization.
Installed on the physical server to host multiple virtual machines (VMs).
Virtual Machines (VMs):
Each VM is allocated a portion of the physical server's resources (e.g., 25GB storage, 25 CPUs for 4 VMs).
Each VM has its own operating system and virtualized hardware.
Drawback: VMs often result in resource underutilization since allocated resources may remain idle, leading to inefficiencies.

Container-Based Virtualization:
Physical Server:
Runs a host operating system (OS) and a container runtime (e.g., Docker).
Containers:
Containers share the host OS kernel and only include minimal dependencies and system packages this is required for isolation that separates the containers.
Unlike VMs, containers do not include a full OS, making them lightweight and efficient.
Container Configurations:

Model 1: Containers directly on a physical server.
Model 2: Containers on VMs (e.g., EC2 instances in AWS).
Benefits:

Lightweight: Containers require fewer resources than VMs since they share the host OS kernel.
Portable: Applications packaged in containers can run seamlessly across different environments.
Efficient: Containers optimize resource utilization by eliminating the overhead of running multiple OS instances.

Lifecycle of Containers in Docker
Writing a Dockerfile:

A Dockerfile is a script-like file that defines how the container is built, specifying the base image, dependencies, and commands.
Building the Image:

Use docker build to create a container image based on the Dockerfile.
The image is a portable, reusable snapshot of the application and its dependencies.
Running the Container:

Use docker run to create and execute a running instance of the image.
Docker Engine:

The core runtime that manages the entire container lifecycle.
It interprets Docker CLI commands to build, manage, and run containers


Key Takeaways
Hypervisor vs. Containers:

VMs include a full OS, while containers share the host OS, making containers more resource-efficient.
Containers are faster to start and consume fewer resources compared to VMs.
Efficiency Gains:

Containers avoid the resource overhead of VMs, maximizing hardware utilization.
Single Point of Failure:

The Docker Engine is a critical component for managing containers. If it goes down, all container operations stop
